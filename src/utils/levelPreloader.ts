// levelPreloader.ts
import { generateGameLevel } from "./levelGenerator";
import { levelStorage } from "./levelStorage";
import { GameState } from "../types/game";

interface PreloadedLevel {
  gameState: GameState;
  isPreGenerated: boolean;
}

class LevelPreloader {
  private preloadedLevels: Map<number, PreloadedLevel> = new Map();
  private generationPromises: Map<number, Promise<void>> = new Map();
  private isGenerating: Map<number, boolean> = new Map();

  /**
   * Obtient un niveau imm√©diatement (depuis Firebase ou pr√©-g√©n√©r√©)
   * et lance la pr√©-g√©n√©ration du suivant
   */
  async getInstantLevel(gridSize: number): Promise<GameState> {
    console.log(`üì¶ Demande niveau ${gridSize}x${gridSize}`);

    // 1. V√©rifier si on a un niveau pr√©-g√©n√©r√©
    const preloaded = this.preloadedLevels.get(gridSize);
    if (preloaded) {
      console.log(`‚ö° Niveau pr√©-g√©n√©r√© disponible`);
      this.preloadedLevels.delete(gridSize); // Consommer le niveau
      this.startBackgroundGeneration(gridSize); // G√©n√©rer le suivant
      return preloaded.gameState;
    }

    // 2. Essayer de r√©cup√©rer depuis Firebase
    try {
      const storedLevel = await levelStorage.getRandomLevel(gridSize);
      if (storedLevel) {
        console.log(`üì¶ Niveau Firebase r√©cup√©r√©`);
        const gameState = levelStorage.convertToGameState(storedLevel);
        this.startBackgroundGeneration(gridSize); // G√©n√©rer pour la prochaine fois
        return {
          ...gameState,
          elapsedTime: 0,
          isTimerRunning: false,
        };
      }
    } catch (error) {
      console.warn(`Firebase √©chec, g√©n√©ration directe...`);
    }

    // 3. G√©n√©rer directement (bloquant, mais seulement au tout d√©but)
    console.log(`üîß G√©n√©ration directe (premi√®re fois)`);
    const gameState = await generateGameLevel(gridSize);
    this.startBackgroundGeneration(gridSize); // Pr√©parer le suivant
    return gameState;
  }

  /**
   * Lance la g√©n√©ration en arri√®re-plan
   */
  private startBackgroundGeneration(gridSize: number): void {
    // √âviter les g√©n√©rations multiples
    if (this.isGenerating.get(gridSize)) {
      console.log(`‚ö†Ô∏è G√©n√©ration ${gridSize}x${gridSize} d√©j√† en cours`);
      return;
    }

    this.isGenerating.set(gridSize, true);
    console.log(`üîÑ D√©marrage g√©n√©ration arri√®re-plan ${gridSize}x${gridSize}`);

    const promise = this.generateAndStoreUnique(gridSize)
      .finally(() => {
        this.isGenerating.set(gridSize, false);
        this.generationPromises.delete(gridSize);
      });

    this.generationPromises.set(gridSize, promise);
  }

  /**
   * G√©n√®re des niveaux jusqu'√† en trouver un unique
   */
  private async generateAndStoreUnique(gridSize: number): Promise<void> {
    const maxAttempts = 10;
    let attempt = 0;

    while (attempt < maxAttempts) {
      attempt++;

      try {
        console.log(`üé≤ G√©n√©ration arri√®re-plan tentative ${attempt}/${maxAttempts} (${gridSize}x${gridSize})`);

        // G√©n√©rer un nouveau niveau
        const gameState = await generateGameLevel(gridSize);

        // Essayer de le sauvegarder (retourne false si d√©j√† existant)
        const saved = await levelStorage.saveLevel(
          gridSize,
          "medium",
          gameState.regions
        );

        if (saved) {
          console.log(`‚úÖ Nouveau niveau ${gridSize}x${gridSize} g√©n√©r√© et sauvegard√©`);
          // Stocker pour usage imm√©diat la prochaine fois
          this.preloadedLevels.set(gridSize, {
            gameState,
            isPreGenerated: true
          });
          return; // Mission accomplie
        } else {
          console.log(`‚ö†Ô∏è Niveau ${gridSize}x${gridSize} d√©j√† existant, nouvelle tentative...`);
          // Continuer la boucle pour g√©n√©rer un niveau diff√©rent
        }

      } catch (error) {
        console.error(`‚ùå Erreur g√©n√©ration arri√®re-plan tentative ${attempt}:`, error);

        // Attendre un peu avant de r√©essayer
        await new Promise(resolve => setTimeout(resolve, 1000));
      }
    }

    console.warn(`‚ö†Ô∏è Impossible de g√©n√©rer un niveau unique ${gridSize}x${gridSize} apr√®s ${maxAttempts} tentatives`);
  }

  /**
   * Pr√©-charge des niveaux pour toutes les tailles populaires
   */
  async preloadPopularSizes(): Promise<void> {
    const popularSizes = [6, 8, 10, 12];
    console.log(`üöÄ Pr√©-chargement des tailles populaires: ${popularSizes.join(', ')}`);

    // Lancer en parall√®le (sans attendre)
    popularSizes.forEach(size => {
      this.startBackgroundGeneration(size);
    });
  }

  /**
   * Obtient le statut de g√©n√©ration
   */
  getGenerationStatus(): Record<number, boolean> {
    const status: Record<number, boolean> = {};
    for (const [size, isGenerating] of this.isGenerating.entries()) {
      status[size] = isGenerating;
    }
    return status;
  }

  /**
   * Indique si un niveau est disponible imm√©diatement
   */
  hasPreloadedLevel(gridSize: number): boolean {
    return this.preloadedLevels.has(gridSize);
  }

  /**
   * Annule toutes les g√©n√©rations en cours
   */
  cancelAllGenerations(): void {
    console.log(`üõë Annulation de toutes les g√©n√©rations`);
    this.isGenerating.clear();
    this.generationPromises.clear();
  }

  /**
   * Nettoie les niveaux pr√©-charg√©s (si besoin de m√©moire)
   */
  clearPreloadedLevels(): void {
    this.preloadedLevels.clear();
    console.log(`üßπ Niveaux pr√©-charg√©s effac√©s`);
  }
}

// Instance singleton
export const levelPreloader = new LevelPreloader();